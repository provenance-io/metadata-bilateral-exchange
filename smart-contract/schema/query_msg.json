{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "get_ask"
      ],
      "properties": {
        "get_ask": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_asks_by_collateral_id"
      ],
      "properties": {
        "get_asks_by_collateral_id": {
          "type": "object",
          "required": [
            "collateral_id"
          ],
          "properties": {
            "collateral_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_bid"
      ],
      "properties": {
        "get_bid": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_match_report"
      ],
      "properties": {
        "get_match_report": {
          "type": "object",
          "required": [
            "ask_id",
            "bid_id"
          ],
          "properties": {
            "admin_match_options": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AdminMatchOptions"
                },
                {
                  "type": "null"
                }
              ]
            },
            "ask_id": {
              "type": "string"
            },
            "bid_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_contract_info"
      ],
      "properties": {
        "get_contract_info": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "search_asks"
      ],
      "properties": {
        "search_asks": {
          "type": "object",
          "required": [
            "search"
          ],
          "properties": {
            "search": {
              "$ref": "#/definitions/Search"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "search_bids"
      ],
      "properties": {
        "search_bids": {
          "type": "object",
          "required": [
            "search"
          ],
          "properties": {
            "search": {
              "$ref": "#/definitions/Search"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AdminMatchOptions": {
      "description": "These options are to be used in matching by the contract admin.  Requests not made by the admin that include admin match options will be rejected.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "coin_trade"
          ],
          "properties": {
            "coin_trade": {
              "type": "object",
              "properties": {
                "accept_mismatched_bids": {
                  "description": "Allows trades with an ask quote that does not match the bid quote to still be executed. Defaults to false if not specified.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_trade"
          ],
          "properties": {
            "marker_trade": {
              "type": "object",
              "properties": {
                "accept_mismatched_bids": {
                  "description": "Allows trades with an ask quote that does not match the bid quote to still be executed. Defaults to false if not specified.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_share_sale"
          ],
          "properties": {
            "marker_share_sale": {
              "type": "object",
              "properties": {
                "override_quote_source": {
                  "description": "Allows trades to use either the ask quote or the bid quote to determine the funds allocated when an ask or bid is executed.  Will never try to use more than the bid quote amount due to the bid quote being the source of the available funds.  Requests to match asks with a higher quote than a bid will also be rejected to prevent askers from getting underpaid.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/OverrideQuoteSource"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "scope_trade"
          ],
          "properties": {
            "scope_trade": {
              "type": "object",
              "properties": {
                "accept_mismatched_bids": {
                  "description": "Allows trades with an ask quote that does not match the bid quote to still be executed. Defaults to false if not specified.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OverrideQuoteSource": {
      "description": "Determines the source of the quote to be sent to the asker after a match executes.  By standard, the ask and bid should have matching quotes, but this allows them to not match and for a mismatched ask or bid to drive the amount that is sent, instead.",
      "type": "string",
      "enum": [
        "ask",
        "bid"
      ]
    },
    "Search": {
      "type": "object",
      "required": [
        "search_type"
      ],
      "properties": {
        "page_number": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "page_size": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "search_type": {
          "$ref": "#/definitions/SearchType"
        }
      }
    },
    "SearchType": {
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "all"
          ]
        },
        {
          "type": "object",
          "required": [
            "value_type"
          ],
          "properties": {
            "value_type": {
              "type": "object",
              "required": [
                "value_type"
              ],
              "properties": {
                "value_type": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "owner": {
              "type": "object",
              "required": [
                "owner"
              ],
              "properties": {
                "owner": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
