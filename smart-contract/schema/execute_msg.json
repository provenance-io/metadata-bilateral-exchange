{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "cancel_ask"
      ],
      "properties": {
        "cancel_ask": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "cancel_bid"
      ],
      "properties": {
        "cancel_bid": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_ask"
      ],
      "properties": {
        "create_ask": {
          "type": "object",
          "required": [
            "ask"
          ],
          "properties": {
            "ask": {
              "$ref": "#/definitions/Ask"
            },
            "descriptor": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RequestDescriptor"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_ask"
      ],
      "properties": {
        "update_ask": {
          "type": "object",
          "required": [
            "ask"
          ],
          "properties": {
            "ask": {
              "$ref": "#/definitions/Ask"
            },
            "descriptor": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RequestDescriptor"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_bid"
      ],
      "properties": {
        "create_bid": {
          "type": "object",
          "required": [
            "bid"
          ],
          "properties": {
            "bid": {
              "$ref": "#/definitions/Bid"
            },
            "descriptor": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RequestDescriptor"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_bid"
      ],
      "properties": {
        "update_bid": {
          "type": "object",
          "required": [
            "bid"
          ],
          "properties": {
            "bid": {
              "$ref": "#/definitions/Bid"
            },
            "descriptor": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RequestDescriptor"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "execute_match"
      ],
      "properties": {
        "execute_match": {
          "type": "object",
          "required": [
            "ask_id",
            "bid_id"
          ],
          "properties": {
            "admin_match_options": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AdminMatchOptions"
                },
                {
                  "type": "null"
                }
              ]
            },
            "ask_id": {
              "type": "string"
            },
            "bid_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_settings"
      ],
      "properties": {
        "update_settings": {
          "type": "object",
          "required": [
            "update"
          ],
          "properties": {
            "update": {
              "$ref": "#/definitions/SettingsUpdate"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AdminMatchOptions": {
      "description": "These options are to be used in matching to alter the behavior of the matching process.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "coin_trade"
          ],
          "properties": {
            "coin_trade": {
              "type": "object",
              "properties": {
                "accept_mismatched_bids": {
                  "description": "Allows trades with an ask quote that does not match the bid quote to still be executed. Defaults to false if not specified.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_trade"
          ],
          "properties": {
            "marker_trade": {
              "type": "object",
              "properties": {
                "accept_mismatched_bids": {
                  "description": "Allows trades with an ask quote that does not match the bid quote to still be executed. Defaults to false if not specified.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_share_sale"
          ],
          "properties": {
            "marker_share_sale": {
              "type": "object",
              "properties": {
                "override_quote_source": {
                  "description": "Allows trades to use either the ask quote or the bid quote to determine the funds allocated when an ask or bid is executed.  Will never try to use more than the bid quote amount due to the bid quote being the source of the available funds.  Requests to match asks with a higher quote than a bid will also be rejected to prevent askers from getting underpaid.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/OverrideQuoteSource"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "scope_trade"
          ],
          "properties": {
            "scope_trade": {
              "type": "object",
              "properties": {
                "accept_mismatched_bids": {
                  "description": "Allows trades with an ask quote that does not match the bid quote to still be executed. Defaults to false if not specified.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Ask": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "coin_trade"
          ],
          "properties": {
            "coin_trade": {
              "$ref": "#/definitions/CoinTradeAsk"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_trade"
          ],
          "properties": {
            "marker_trade": {
              "$ref": "#/definitions/MarkerTradeAsk"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_share_sale"
          ],
          "properties": {
            "marker_share_sale": {
              "$ref": "#/definitions/MarkerShareSaleAsk"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "scope_trade"
          ],
          "properties": {
            "scope_trade": {
              "$ref": "#/definitions/ScopeTradeAsk"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AttributeRequirement": {
      "type": "object",
      "required": [
        "attributes",
        "requirement_type"
      ],
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requirement_type": {
          "$ref": "#/definitions/AttributeRequirementType"
        }
      }
    },
    "AttributeRequirementType": {
      "type": "string",
      "enum": [
        "all",
        "any",
        "none"
      ]
    },
    "Bid": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "coin_trade"
          ],
          "properties": {
            "coin_trade": {
              "$ref": "#/definitions/CoinTradeBid"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_trade"
          ],
          "properties": {
            "marker_trade": {
              "$ref": "#/definitions/MarkerTradeBid"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "marker_share_sale"
          ],
          "properties": {
            "marker_share_sale": {
              "$ref": "#/definitions/MarkerShareSaleBid"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "scope_trade"
          ],
          "properties": {
            "scope_trade": {
              "$ref": "#/definitions/ScopeTradeBid"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CoinTradeAsk": {
      "type": "object",
      "required": [
        "id",
        "quote"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "quote": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "CoinTradeBid": {
      "type": "object",
      "required": [
        "base",
        "id"
      ],
      "properties": {
        "base": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "MarkerShareSaleAsk": {
      "type": "object",
      "required": [
        "id",
        "marker_denom",
        "quote_per_share",
        "share_sale_type",
        "shares_to_sell"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "marker_denom": {
          "type": "string"
        },
        "quote_per_share": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "share_sale_type": {
          "$ref": "#/definitions/ShareSaleType"
        },
        "shares_to_sell": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "MarkerShareSaleBid": {
      "type": "object",
      "required": [
        "id",
        "marker_denom",
        "share_count"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "marker_denom": {
          "type": "string"
        },
        "share_count": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "MarkerTradeAsk": {
      "type": "object",
      "required": [
        "id",
        "marker_denom",
        "quote_per_share"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "marker_denom": {
          "type": "string"
        },
        "quote_per_share": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "MarkerTradeBid": {
      "type": "object",
      "required": [
        "id",
        "marker_denom"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "marker_denom": {
          "type": "string"
        },
        "withdraw_shares_after_match": {
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "OverrideQuoteSource": {
      "description": "Determines the source of the quote to be sent to the asker after a match executes.  By standard, the ask and bid should have matching quotes, but this allows them to not match and for a mismatched ask or bid to drive the amount that is sent, instead.",
      "type": "string",
      "enum": [
        "ask",
        "bid"
      ]
    },
    "RequestDescriptor": {
      "type": "object",
      "properties": {
        "attribute_requirement": {
          "anyOf": [
            {
              "$ref": "#/definitions/AttributeRequirement"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "effective_time": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ScopeTradeAsk": {
      "type": "object",
      "required": [
        "id",
        "quote",
        "scope_address"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "quote": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "scope_address": {
          "type": "string"
        }
      }
    },
    "ScopeTradeBid": {
      "type": "object",
      "required": [
        "id",
        "scope_address"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "scope_address": {
          "type": "string"
        }
      }
    },
    "SettingsUpdate": {
      "type": "object",
      "properties": {
        "new_admin_address": {
          "type": [
            "string",
            "null"
          ]
        },
        "new_create_ask_nhash_fee": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "new_create_bid_nhash_fee": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ShareSaleType": {
      "type": "string",
      "enum": [
        "single_transaction",
        "multiple_transactions"
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
